/*
 * OANDA v20 REST API
 *
 * The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TradeSummary : The summary of a Trade within an Account. This representation does not provide the full details of the Trade's dependent Orders.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TradeSummary {
    /// The Trade's identifier, unique within the Trade's Account.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The Trade's Instrument.
    #[serde(rename = "instrument", skip_serializing_if = "Option::is_none")]
    pub instrument: Option<String>,
    /// The execution price of the Trade.
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    /// The date/time when the Trade was opened.
    #[serde(rename = "openTime", skip_serializing_if = "Option::is_none")]
    pub open_time: Option<String>,
    /// The current state of the Trade.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// The initial size of the Trade. Negative values indicate a short Trade, and positive values indicate a long Trade.
    #[serde(rename = "initialUnits", skip_serializing_if = "Option::is_none")]
    pub initial_units: Option<String>,
    /// The margin required at the time the Trade was created. Note, this is the 'pure' margin required, it is not the 'effective' margin used that factors in the trade risk if a GSLO is attached to the trade.
    #[serde(rename = "initialMarginRequired", skip_serializing_if = "Option::is_none")]
    pub initial_margin_required: Option<String>,
    /// The number of units currently open for the Trade. This value is reduced to 0.0 as the Trade is closed.
    #[serde(rename = "currentUnits", skip_serializing_if = "Option::is_none")]
    pub current_units: Option<String>,
    /// The total profit/loss realized on the closed portion of the Trade.
    #[serde(rename = "realizedPL", skip_serializing_if = "Option::is_none")]
    pub realized_pl: Option<String>,
    /// The unrealized profit/loss on the open portion of the Trade.
    #[serde(rename = "unrealizedPL", skip_serializing_if = "Option::is_none")]
    pub unrealized_pl: Option<String>,
    /// Margin currently used by the Trade.
    #[serde(rename = "marginUsed", skip_serializing_if = "Option::is_none")]
    pub margin_used: Option<String>,
    /// The average closing price of the Trade. Only present if the Trade has been closed or reduced at least once.
    #[serde(rename = "averageClosePrice", skip_serializing_if = "Option::is_none")]
    pub average_close_price: Option<String>,
    /// The IDs of the Transactions that have closed portions of this Trade.
    #[serde(rename = "closingTransactionIDs", skip_serializing_if = "Option::is_none")]
    pub closing_transaction_ids: Option<Vec<String>>,
    /// The financing paid/collected for this Trade.
    #[serde(rename = "financing", skip_serializing_if = "Option::is_none")]
    pub financing: Option<String>,
    /// The date/time when the Trade was fully closed. Only provided for Trades whose state is CLOSED.
    #[serde(rename = "closeTime", skip_serializing_if = "Option::is_none")]
    pub close_time: Option<String>,
    #[serde(rename = "clientExtensions", skip_serializing_if = "Option::is_none")]
    pub client_extensions: Option<Box<models::ClientExtensions>>,
    /// ID of the Trade's Take Profit Order, only provided if such an Order exists.
    #[serde(rename = "takeProfitOrderID", skip_serializing_if = "Option::is_none")]
    pub take_profit_order_id: Option<String>,
    /// ID of the Trade's Stop Loss Order, only provided if such an Order exists.
    #[serde(rename = "stopLossOrderID", skip_serializing_if = "Option::is_none")]
    pub stop_loss_order_id: Option<String>,
    /// ID of the Trade's Trailing Stop Loss Order, only provided if such an Order exists.
    #[serde(rename = "trailingStopLossOrderID", skip_serializing_if = "Option::is_none")]
    pub trailing_stop_loss_order_id: Option<String>,
}

impl TradeSummary {
    /// The summary of a Trade within an Account. This representation does not provide the full details of the Trade's dependent Orders.
    pub fn new() -> TradeSummary {
        TradeSummary {
            id: None,
            instrument: None,
            price: None,
            open_time: None,
            state: None,
            initial_units: None,
            initial_margin_required: None,
            current_units: None,
            realized_pl: None,
            unrealized_pl: None,
            margin_used: None,
            average_close_price: None,
            closing_transaction_ids: None,
            financing: None,
            close_time: None,
            client_extensions: None,
            take_profit_order_id: None,
            stop_loss_order_id: None,
            trailing_stop_loss_order_id: None,
        }
    }
}
/// The current state of the Trade.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "OPEN")]
    Open,
    #[serde(rename = "CLOSED")]
    Closed,
    #[serde(rename = "CLOSE_WHEN_TRADEABLE")]
    CloseWhenTradeable,
}

impl Default for State {
    fn default() -> State {
        Self::Open
    }
}

