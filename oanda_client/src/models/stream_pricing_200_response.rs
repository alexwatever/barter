/*
 * OANDA v20 REST API
 *
 * The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// StreamPricing200Response : The response body for the Pricing Stream uses chunked transfer encoding.  Each chunk contains Price and/or PricingHeartbeat objects encoded as JSON.  Each JSON object is serialized into a single line of text, and multiple objects found in the same chunk are separated by newlines. Heartbeats are sent every 5 seconds.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StreamPricing200Response {
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<Box<models::ClientPrice>>,
    #[serde(rename = "heartbeat", skip_serializing_if = "Option::is_none")]
    pub heartbeat: Option<Box<models::PricingHeartbeat>>,
}

impl StreamPricing200Response {
    /// The response body for the Pricing Stream uses chunked transfer encoding.  Each chunk contains Price and/or PricingHeartbeat objects encoded as JSON.  Each JSON object is serialized into a single line of text, and multiple objects found in the same chunk are separated by newlines. Heartbeats are sent every 5 seconds.
    pub fn new() -> StreamPricing200Response {
        StreamPricing200Response {
            price: None,
            heartbeat: None,
        }
    }
}

