/*
 * OANDA v20 REST API
 *
 * The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PositionBook : The representation of an instrument's position book at a point in time
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PositionBook {
    /// The position book's instrument
    #[serde(rename = "instrument", skip_serializing_if = "Option::is_none")]
    pub instrument: Option<String>,
    /// The time when the position book snapshot was created
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
    /// The price (midpoint) for the position book's instrument at the time of the position book snapshot
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    /// The price width for each bucket. Each bucket covers the price range from the bucket's price to the bucket's price + bucketWidth.
    #[serde(rename = "bucketWidth", skip_serializing_if = "Option::is_none")]
    pub bucket_width: Option<String>,
    /// The partitioned position book, divided into buckets using a default bucket width. These buckets are only provided for price ranges which actually contain order or position data.
    #[serde(rename = "buckets", skip_serializing_if = "Option::is_none")]
    pub buckets: Option<Vec<models::PositionBookBucket>>,
}

impl PositionBook {
    /// The representation of an instrument's position book at a point in time
    pub fn new() -> PositionBook {
        PositionBook {
            instrument: None,
            time: None,
            price: None,
            bucket_width: None,
            buckets: None,
        }
    }
}

