/*
 * OANDA v20 REST API
 *
 * The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// LiquidityRegenerationScheduleStep : A liquidity regeneration schedule Step indicates the amount of bid and ask liquidity that is used by the Account at a certain time. These amounts will only change at the timestamp of the following step.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LiquidityRegenerationScheduleStep {
    /// The timestamp of the schedule step.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    /// The amount of bid liquidity used at this step in the schedule.
    #[serde(rename = "bidLiquidityUsed", skip_serializing_if = "Option::is_none")]
    pub bid_liquidity_used: Option<String>,
    /// The amount of ask liquidity used at this step in the schedule.
    #[serde(rename = "askLiquidityUsed", skip_serializing_if = "Option::is_none")]
    pub ask_liquidity_used: Option<String>,
}

impl LiquidityRegenerationScheduleStep {
    /// A liquidity regeneration schedule Step indicates the amount of bid and ask liquidity that is used by the Account at a certain time. These amounts will only change at the timestamp of the following step.
    pub fn new() -> LiquidityRegenerationScheduleStep {
        LiquidityRegenerationScheduleStep {
            timestamp: None,
            bid_liquidity_used: None,
            ask_liquidity_used: None,
        }
    }
}

