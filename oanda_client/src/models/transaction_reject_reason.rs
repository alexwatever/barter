/*
 * OANDA v20 REST API
 *
 * The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TransactionRejectReason : The reason that a Transaction was rejected.
/// The reason that a Transaction was rejected.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TransactionRejectReason {
    #[serde(rename = "INTERNAL_SERVER_ERROR")]
    InternalServerError,
    #[serde(rename = "INSTRUMENT_PRICE_UNKNOWN")]
    InstrumentPriceUnknown,
    #[serde(rename = "ACCOUNT_NOT_ACTIVE")]
    AccountNotActive,
    #[serde(rename = "ACCOUNT_LOCKED")]
    AccountLocked,
    #[serde(rename = "ACCOUNT_ORDER_CREATION_LOCKED")]
    AccountOrderCreationLocked,
    #[serde(rename = "ACCOUNT_CONFIGURATION_LOCKED")]
    AccountConfigurationLocked,
    #[serde(rename = "ACCOUNT_DEPOSIT_LOCKED")]
    AccountDepositLocked,
    #[serde(rename = "ACCOUNT_WITHDRAWAL_LOCKED")]
    AccountWithdrawalLocked,
    #[serde(rename = "ACCOUNT_ORDER_CANCEL_LOCKED")]
    AccountOrderCancelLocked,
    #[serde(rename = "INSTRUMENT_NOT_TRADEABLE")]
    InstrumentNotTradeable,
    #[serde(rename = "PENDING_ORDERS_ALLOWED_EXCEEDED")]
    PendingOrdersAllowedExceeded,
    #[serde(rename = "ORDER_ID_UNSPECIFIED")]
    OrderIdUnspecified,
    #[serde(rename = "ORDER_DOESNT_EXIST")]
    OrderDoesntExist,
    #[serde(rename = "ORDER_IDENTIFIER_INCONSISTENCY")]
    OrderIdentifierInconsistency,
    #[serde(rename = "TRADE_ID_UNSPECIFIED")]
    TradeIdUnspecified,
    #[serde(rename = "TRADE_DOESNT_EXIST")]
    TradeDoesntExist,
    #[serde(rename = "TRADE_IDENTIFIER_INCONSISTENCY")]
    TradeIdentifierInconsistency,
    #[serde(rename = "INSUFFICIENT_MARGIN")]
    InsufficientMargin,
    #[serde(rename = "INSTRUMENT_MISSING")]
    InstrumentMissing,
    #[serde(rename = "INSTRUMENT_UNKNOWN")]
    InstrumentUnknown,
    #[serde(rename = "UNITS_MISSING")]
    UnitsMissing,
    #[serde(rename = "UNITS_INVALID")]
    UnitsInvalid,
    #[serde(rename = "UNITS_PRECISION_EXCEEDED")]
    UnitsPrecisionExceeded,
    #[serde(rename = "UNITS_LIMIT_EXCEEDED")]
    UnitsLimitExceeded,
    #[serde(rename = "UNITS_MIMIMUM_NOT_MET")]
    UnitsMimimumNotMet,
    #[serde(rename = "PRICE_MISSING")]
    PriceMissing,
    #[serde(rename = "PRICE_INVALID")]
    PriceInvalid,
    #[serde(rename = "PRICE_PRECISION_EXCEEDED")]
    PricePrecisionExceeded,
    #[serde(rename = "PRICE_DISTANCE_MISSING")]
    PriceDistanceMissing,
    #[serde(rename = "PRICE_DISTANCE_INVALID")]
    PriceDistanceInvalid,
    #[serde(rename = "PRICE_DISTANCE_PRECISION_EXCEEDED")]
    PriceDistancePrecisionExceeded,
    #[serde(rename = "PRICE_DISTANCE_MAXIMUM_EXCEEDED")]
    PriceDistanceMaximumExceeded,
    #[serde(rename = "PRICE_DISTANCE_MINIMUM_NOT_MET")]
    PriceDistanceMinimumNotMet,
    #[serde(rename = "TIME_IN_FORCE_MISSING")]
    TimeInForceMissing,
    #[serde(rename = "TIME_IN_FORCE_INVALID")]
    TimeInForceInvalid,
    #[serde(rename = "TIME_IN_FORCE_GTD_TIMESTAMP_MISSING")]
    TimeInForceGtdTimestampMissing,
    #[serde(rename = "TIME_IN_FORCE_GTD_TIMESTAMP_IN_PAST")]
    TimeInForceGtdTimestampInPast,
    #[serde(rename = "PRICE_BOUND_INVALID")]
    PriceBoundInvalid,
    #[serde(rename = "PRICE_BOUND_PRECISION_EXCEEDED")]
    PriceBoundPrecisionExceeded,
    #[serde(rename = "ORDERS_ON_FILL_DUPLICATE_CLIENT_ORDER_IDS")]
    OrdersOnFillDuplicateClientOrderIds,
    #[serde(rename = "TRADE_ON_FILL_CLIENT_EXTENSIONS_NOT_SUPPORTED")]
    TradeOnFillClientExtensionsNotSupported,
    #[serde(rename = "CLIENT_ORDER_ID_INVALID")]
    ClientOrderIdInvalid,
    #[serde(rename = "CLIENT_ORDER_ID_ALREADY_EXISTS")]
    ClientOrderIdAlreadyExists,
    #[serde(rename = "CLIENT_ORDER_TAG_INVALID")]
    ClientOrderTagInvalid,
    #[serde(rename = "CLIENT_ORDER_COMMENT_INVALID")]
    ClientOrderCommentInvalid,
    #[serde(rename = "CLIENT_TRADE_ID_INVALID")]
    ClientTradeIdInvalid,
    #[serde(rename = "CLIENT_TRADE_ID_ALREADY_EXISTS")]
    ClientTradeIdAlreadyExists,
    #[serde(rename = "CLIENT_TRADE_TAG_INVALID")]
    ClientTradeTagInvalid,
    #[serde(rename = "CLIENT_TRADE_COMMENT_INVALID")]
    ClientTradeCommentInvalid,
    #[serde(rename = "ORDER_FILL_POSITION_ACTION_MISSING")]
    OrderFillPositionActionMissing,
    #[serde(rename = "ORDER_FILL_POSITION_ACTION_INVALID")]
    OrderFillPositionActionInvalid,
    #[serde(rename = "TRIGGER_CONDITION_MISSING")]
    TriggerConditionMissing,
    #[serde(rename = "TRIGGER_CONDITION_INVALID")]
    TriggerConditionInvalid,
    #[serde(rename = "ORDER_PARTIAL_FILL_OPTION_MISSING")]
    OrderPartialFillOptionMissing,
    #[serde(rename = "ORDER_PARTIAL_FILL_OPTION_INVALID")]
    OrderPartialFillOptionInvalid,
    #[serde(rename = "INVALID_REISSUE_IMMEDIATE_PARTIAL_FILL")]
    InvalidReissueImmediatePartialFill,
    #[serde(rename = "TAKE_PROFIT_ORDER_ALREADY_EXISTS")]
    TakeProfitOrderAlreadyExists,
    #[serde(rename = "TAKE_PROFIT_ON_FILL_PRICE_MISSING")]
    TakeProfitOnFillPriceMissing,
    #[serde(rename = "TAKE_PROFIT_ON_FILL_PRICE_INVALID")]
    TakeProfitOnFillPriceInvalid,
    #[serde(rename = "TAKE_PROFIT_ON_FILL_PRICE_PRECISION_EXCEEDED")]
    TakeProfitOnFillPricePrecisionExceeded,
    #[serde(rename = "TAKE_PROFIT_ON_FILL_TIME_IN_FORCE_MISSING")]
    TakeProfitOnFillTimeInForceMissing,
    #[serde(rename = "TAKE_PROFIT_ON_FILL_TIME_IN_FORCE_INVALID")]
    TakeProfitOnFillTimeInForceInvalid,
    #[serde(rename = "TAKE_PROFIT_ON_FILL_GTD_TIMESTAMP_MISSING")]
    TakeProfitOnFillGtdTimestampMissing,
    #[serde(rename = "TAKE_PROFIT_ON_FILL_GTD_TIMESTAMP_IN_PAST")]
    TakeProfitOnFillGtdTimestampInPast,
    #[serde(rename = "TAKE_PROFIT_ON_FILL_CLIENT_ORDER_ID_INVALID")]
    TakeProfitOnFillClientOrderIdInvalid,
    #[serde(rename = "TAKE_PROFIT_ON_FILL_CLIENT_ORDER_TAG_INVALID")]
    TakeProfitOnFillClientOrderTagInvalid,
    #[serde(rename = "TAKE_PROFIT_ON_FILL_CLIENT_ORDER_COMMENT_INVALID")]
    TakeProfitOnFillClientOrderCommentInvalid,
    #[serde(rename = "TAKE_PROFIT_ON_FILL_TRIGGER_CONDITION_MISSING")]
    TakeProfitOnFillTriggerConditionMissing,
    #[serde(rename = "TAKE_PROFIT_ON_FILL_TRIGGER_CONDITION_INVALID")]
    TakeProfitOnFillTriggerConditionInvalid,
    #[serde(rename = "STOP_LOSS_ORDER_ALREADY_EXISTS")]
    StopLossOrderAlreadyExists,
    #[serde(rename = "STOP_LOSS_ORDER_GUARANTEED_REQUIRED")]
    StopLossOrderGuaranteedRequired,
    #[serde(rename = "STOP_LOSS_ORDER_GUARANTEED_PRICE_WITHIN_SPREAD")]
    StopLossOrderGuaranteedPriceWithinSpread,
    #[serde(rename = "STOP_LOSS_ORDER_GUARANTEED_NOT_ALLOWED")]
    StopLossOrderGuaranteedNotAllowed,
    #[serde(rename = "STOP_LOSS_ORDER_GUARANTEED_HALTED_CREATE_VIOLATION")]
    StopLossOrderGuaranteedHaltedCreateViolation,
    #[serde(rename = "STOP_LOSS_ORDER_GUARANTEED_HALTED_TIGHTEN_VIOLATION")]
    StopLossOrderGuaranteedHaltedTightenViolation,
    #[serde(rename = "STOP_LOSS_ORDER_GUARANTEED_HEDGING_NOT_ALLOWED")]
    StopLossOrderGuaranteedHedgingNotAllowed,
    #[serde(rename = "STOP_LOSS_ORDER_GUARANTEED_MINIMUM_DISTANCE_NOT_MET")]
    StopLossOrderGuaranteedMinimumDistanceNotMet,
    #[serde(rename = "STOP_LOSS_ORDER_NOT_CANCELABLE")]
    StopLossOrderNotCancelable,
    #[serde(rename = "STOP_LOSS_ORDER_NOT_REPLACEABLE")]
    StopLossOrderNotReplaceable,
    #[serde(rename = "STOP_LOSS_ORDER_GUARANTEED_LEVEL_RESTRICTION_EXCEEDED")]
    StopLossOrderGuaranteedLevelRestrictionExceeded,
    #[serde(rename = "STOP_LOSS_ORDER_PRICE_AND_DISTANCE_BOTH_SPECIFIED")]
    StopLossOrderPriceAndDistanceBothSpecified,
    #[serde(rename = "STOP_LOSS_ORDER_PRICE_AND_DISTANCE_BOTH_MISSING")]
    StopLossOrderPriceAndDistanceBothMissing,
    #[serde(rename = "STOP_LOSS_ON_FILL_REQUIRED_FOR_PENDING_ORDER")]
    StopLossOnFillRequiredForPendingOrder,
    #[serde(rename = "STOP_LOSS_ON_FILL_GUARANTEED_NOT_ALLOWED")]
    StopLossOnFillGuaranteedNotAllowed,
    #[serde(rename = "STOP_LOSS_ON_FILL_GUARANTEED_REQUIRED")]
    StopLossOnFillGuaranteedRequired,
    #[serde(rename = "STOP_LOSS_ON_FILL_PRICE_MISSING")]
    StopLossOnFillPriceMissing,
    #[serde(rename = "STOP_LOSS_ON_FILL_PRICE_INVALID")]
    StopLossOnFillPriceInvalid,
    #[serde(rename = "STOP_LOSS_ON_FILL_PRICE_PRECISION_EXCEEDED")]
    StopLossOnFillPricePrecisionExceeded,
    #[serde(rename = "STOP_LOSS_ON_FILL_GUARANTEED_MINIMUM_DISTANCE_NOT_MET")]
    StopLossOnFillGuaranteedMinimumDistanceNotMet,
    #[serde(rename = "STOP_LOSS_ON_FILL_GUARANTEED_LEVEL_RESTRICTION_EXCEEDED")]
    StopLossOnFillGuaranteedLevelRestrictionExceeded,
    #[serde(rename = "STOP_LOSS_ON_FILL_DISTANCE_INVALID")]
    StopLossOnFillDistanceInvalid,
    #[serde(rename = "STOP_LOSS_ON_FILL_PRICE_DISTANCE_MAXIMUM_EXCEEDED")]
    StopLossOnFillPriceDistanceMaximumExceeded,
    #[serde(rename = "STOP_LOSS_ON_FILL_DISTANCE_PRECISION_EXCEEDED")]
    StopLossOnFillDistancePrecisionExceeded,
    #[serde(rename = "STOP_LOSS_ON_FILL_PRICE_AND_DISTANCE_BOTH_SPECIFIED")]
    StopLossOnFillPriceAndDistanceBothSpecified,
    #[serde(rename = "STOP_LOSS_ON_FILL_PRICE_AND_DISTANCE_BOTH_MISSING")]
    StopLossOnFillPriceAndDistanceBothMissing,
    #[serde(rename = "STOP_LOSS_ON_FILL_TIME_IN_FORCE_MISSING")]
    StopLossOnFillTimeInForceMissing,
    #[serde(rename = "STOP_LOSS_ON_FILL_TIME_IN_FORCE_INVALID")]
    StopLossOnFillTimeInForceInvalid,
    #[serde(rename = "STOP_LOSS_ON_FILL_GTD_TIMESTAMP_MISSING")]
    StopLossOnFillGtdTimestampMissing,
    #[serde(rename = "STOP_LOSS_ON_FILL_GTD_TIMESTAMP_IN_PAST")]
    StopLossOnFillGtdTimestampInPast,
    #[serde(rename = "STOP_LOSS_ON_FILL_CLIENT_ORDER_ID_INVALID")]
    StopLossOnFillClientOrderIdInvalid,
    #[serde(rename = "STOP_LOSS_ON_FILL_CLIENT_ORDER_TAG_INVALID")]
    StopLossOnFillClientOrderTagInvalid,
    #[serde(rename = "STOP_LOSS_ON_FILL_CLIENT_ORDER_COMMENT_INVALID")]
    StopLossOnFillClientOrderCommentInvalid,
    #[serde(rename = "STOP_LOSS_ON_FILL_TRIGGER_CONDITION_MISSING")]
    StopLossOnFillTriggerConditionMissing,
    #[serde(rename = "STOP_LOSS_ON_FILL_TRIGGER_CONDITION_INVALID")]
    StopLossOnFillTriggerConditionInvalid,
    #[serde(rename = "TRAILING_STOP_LOSS_ORDER_ALREADY_EXISTS")]
    TrailingStopLossOrderAlreadyExists,
    #[serde(rename = "TRAILING_STOP_LOSS_ON_FILL_PRICE_DISTANCE_MISSING")]
    TrailingStopLossOnFillPriceDistanceMissing,
    #[serde(rename = "TRAILING_STOP_LOSS_ON_FILL_PRICE_DISTANCE_INVALID")]
    TrailingStopLossOnFillPriceDistanceInvalid,
    #[serde(rename = "TRAILING_STOP_LOSS_ON_FILL_PRICE_DISTANCE_PRECISION_EXCEEDED")]
    TrailingStopLossOnFillPriceDistancePrecisionExceeded,
    #[serde(rename = "TRAILING_STOP_LOSS_ON_FILL_PRICE_DISTANCE_MAXIMUM_EXCEEDED")]
    TrailingStopLossOnFillPriceDistanceMaximumExceeded,
    #[serde(rename = "TRAILING_STOP_LOSS_ON_FILL_PRICE_DISTANCE_MINIMUM_NOT_MET")]
    TrailingStopLossOnFillPriceDistanceMinimumNotMet,
    #[serde(rename = "TRAILING_STOP_LOSS_ON_FILL_TIME_IN_FORCE_MISSING")]
    TrailingStopLossOnFillTimeInForceMissing,
    #[serde(rename = "TRAILING_STOP_LOSS_ON_FILL_TIME_IN_FORCE_INVALID")]
    TrailingStopLossOnFillTimeInForceInvalid,
    #[serde(rename = "TRAILING_STOP_LOSS_ON_FILL_GTD_TIMESTAMP_MISSING")]
    TrailingStopLossOnFillGtdTimestampMissing,
    #[serde(rename = "TRAILING_STOP_LOSS_ON_FILL_GTD_TIMESTAMP_IN_PAST")]
    TrailingStopLossOnFillGtdTimestampInPast,
    #[serde(rename = "TRAILING_STOP_LOSS_ON_FILL_CLIENT_ORDER_ID_INVALID")]
    TrailingStopLossOnFillClientOrderIdInvalid,
    #[serde(rename = "TRAILING_STOP_LOSS_ON_FILL_CLIENT_ORDER_TAG_INVALID")]
    TrailingStopLossOnFillClientOrderTagInvalid,
    #[serde(rename = "TRAILING_STOP_LOSS_ON_FILL_CLIENT_ORDER_COMMENT_INVALID")]
    TrailingStopLossOnFillClientOrderCommentInvalid,
    #[serde(rename = "TRAILING_STOP_LOSS_ORDERS_NOT_SUPPORTED")]
    TrailingStopLossOrdersNotSupported,
    #[serde(rename = "TRAILING_STOP_LOSS_ON_FILL_TRIGGER_CONDITION_MISSING")]
    TrailingStopLossOnFillTriggerConditionMissing,
    #[serde(rename = "TRAILING_STOP_LOSS_ON_FILL_TRIGGER_CONDITION_INVALID")]
    TrailingStopLossOnFillTriggerConditionInvalid,
    #[serde(rename = "CLOSE_TRADE_TYPE_MISSING")]
    CloseTradeTypeMissing,
    #[serde(rename = "CLOSE_TRADE_PARTIAL_UNITS_MISSING")]
    CloseTradePartialUnitsMissing,
    #[serde(rename = "CLOSE_TRADE_UNITS_EXCEED_TRADE_SIZE")]
    CloseTradeUnitsExceedTradeSize,
    #[serde(rename = "CLOSEOUT_POSITION_DOESNT_EXIST")]
    CloseoutPositionDoesntExist,
    #[serde(rename = "CLOSEOUT_POSITION_INCOMPLETE_SPECIFICATION")]
    CloseoutPositionIncompleteSpecification,
    #[serde(rename = "CLOSEOUT_POSITION_UNITS_EXCEED_POSITION_SIZE")]
    CloseoutPositionUnitsExceedPositionSize,
    #[serde(rename = "CLOSEOUT_POSITION_REJECT")]
    CloseoutPositionReject,
    #[serde(rename = "CLOSEOUT_POSITION_PARTIAL_UNITS_MISSING")]
    CloseoutPositionPartialUnitsMissing,
    #[serde(rename = "MARKUP_GROUP_ID_INVALID")]
    MarkupGroupIdInvalid,
    #[serde(rename = "POSITION_AGGREGATION_MODE_INVALID")]
    PositionAggregationModeInvalid,
    #[serde(rename = "ADMIN_CONFIGURE_DATA_MISSING")]
    AdminConfigureDataMissing,
    #[serde(rename = "MARGIN_RATE_INVALID")]
    MarginRateInvalid,
    #[serde(rename = "MARGIN_RATE_WOULD_TRIGGER_CLOSEOUT")]
    MarginRateWouldTriggerCloseout,
    #[serde(rename = "ALIAS_INVALID")]
    AliasInvalid,
    #[serde(rename = "CLIENT_CONFIGURE_DATA_MISSING")]
    ClientConfigureDataMissing,
    #[serde(rename = "MARGIN_RATE_WOULD_TRIGGER_MARGIN_CALL")]
    MarginRateWouldTriggerMarginCall,
    #[serde(rename = "AMOUNT_INVALID")]
    AmountInvalid,
    #[serde(rename = "INSUFFICIENT_FUNDS")]
    InsufficientFunds,
    #[serde(rename = "AMOUNT_MISSING")]
    AmountMissing,
    #[serde(rename = "FUNDING_REASON_MISSING")]
    FundingReasonMissing,
    #[serde(rename = "CLIENT_EXTENSIONS_DATA_MISSING")]
    ClientExtensionsDataMissing,
    #[serde(rename = "REPLACING_ORDER_INVALID")]
    ReplacingOrderInvalid,
    #[serde(rename = "REPLACING_TRADE_ID_INVALID")]
    ReplacingTradeIdInvalid,

}

impl std::fmt::Display for TransactionRejectReason {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::InternalServerError => write!(f, "INTERNAL_SERVER_ERROR"),
            Self::InstrumentPriceUnknown => write!(f, "INSTRUMENT_PRICE_UNKNOWN"),
            Self::AccountNotActive => write!(f, "ACCOUNT_NOT_ACTIVE"),
            Self::AccountLocked => write!(f, "ACCOUNT_LOCKED"),
            Self::AccountOrderCreationLocked => write!(f, "ACCOUNT_ORDER_CREATION_LOCKED"),
            Self::AccountConfigurationLocked => write!(f, "ACCOUNT_CONFIGURATION_LOCKED"),
            Self::AccountDepositLocked => write!(f, "ACCOUNT_DEPOSIT_LOCKED"),
            Self::AccountWithdrawalLocked => write!(f, "ACCOUNT_WITHDRAWAL_LOCKED"),
            Self::AccountOrderCancelLocked => write!(f, "ACCOUNT_ORDER_CANCEL_LOCKED"),
            Self::InstrumentNotTradeable => write!(f, "INSTRUMENT_NOT_TRADEABLE"),
            Self::PendingOrdersAllowedExceeded => write!(f, "PENDING_ORDERS_ALLOWED_EXCEEDED"),
            Self::OrderIdUnspecified => write!(f, "ORDER_ID_UNSPECIFIED"),
            Self::OrderDoesntExist => write!(f, "ORDER_DOESNT_EXIST"),
            Self::OrderIdentifierInconsistency => write!(f, "ORDER_IDENTIFIER_INCONSISTENCY"),
            Self::TradeIdUnspecified => write!(f, "TRADE_ID_UNSPECIFIED"),
            Self::TradeDoesntExist => write!(f, "TRADE_DOESNT_EXIST"),
            Self::TradeIdentifierInconsistency => write!(f, "TRADE_IDENTIFIER_INCONSISTENCY"),
            Self::InsufficientMargin => write!(f, "INSUFFICIENT_MARGIN"),
            Self::InstrumentMissing => write!(f, "INSTRUMENT_MISSING"),
            Self::InstrumentUnknown => write!(f, "INSTRUMENT_UNKNOWN"),
            Self::UnitsMissing => write!(f, "UNITS_MISSING"),
            Self::UnitsInvalid => write!(f, "UNITS_INVALID"),
            Self::UnitsPrecisionExceeded => write!(f, "UNITS_PRECISION_EXCEEDED"),
            Self::UnitsLimitExceeded => write!(f, "UNITS_LIMIT_EXCEEDED"),
            Self::UnitsMimimumNotMet => write!(f, "UNITS_MIMIMUM_NOT_MET"),
            Self::PriceMissing => write!(f, "PRICE_MISSING"),
            Self::PriceInvalid => write!(f, "PRICE_INVALID"),
            Self::PricePrecisionExceeded => write!(f, "PRICE_PRECISION_EXCEEDED"),
            Self::PriceDistanceMissing => write!(f, "PRICE_DISTANCE_MISSING"),
            Self::PriceDistanceInvalid => write!(f, "PRICE_DISTANCE_INVALID"),
            Self::PriceDistancePrecisionExceeded => write!(f, "PRICE_DISTANCE_PRECISION_EXCEEDED"),
            Self::PriceDistanceMaximumExceeded => write!(f, "PRICE_DISTANCE_MAXIMUM_EXCEEDED"),
            Self::PriceDistanceMinimumNotMet => write!(f, "PRICE_DISTANCE_MINIMUM_NOT_MET"),
            Self::TimeInForceMissing => write!(f, "TIME_IN_FORCE_MISSING"),
            Self::TimeInForceInvalid => write!(f, "TIME_IN_FORCE_INVALID"),
            Self::TimeInForceGtdTimestampMissing => write!(f, "TIME_IN_FORCE_GTD_TIMESTAMP_MISSING"),
            Self::TimeInForceGtdTimestampInPast => write!(f, "TIME_IN_FORCE_GTD_TIMESTAMP_IN_PAST"),
            Self::PriceBoundInvalid => write!(f, "PRICE_BOUND_INVALID"),
            Self::PriceBoundPrecisionExceeded => write!(f, "PRICE_BOUND_PRECISION_EXCEEDED"),
            Self::OrdersOnFillDuplicateClientOrderIds => write!(f, "ORDERS_ON_FILL_DUPLICATE_CLIENT_ORDER_IDS"),
            Self::TradeOnFillClientExtensionsNotSupported => write!(f, "TRADE_ON_FILL_CLIENT_EXTENSIONS_NOT_SUPPORTED"),
            Self::ClientOrderIdInvalid => write!(f, "CLIENT_ORDER_ID_INVALID"),
            Self::ClientOrderIdAlreadyExists => write!(f, "CLIENT_ORDER_ID_ALREADY_EXISTS"),
            Self::ClientOrderTagInvalid => write!(f, "CLIENT_ORDER_TAG_INVALID"),
            Self::ClientOrderCommentInvalid => write!(f, "CLIENT_ORDER_COMMENT_INVALID"),
            Self::ClientTradeIdInvalid => write!(f, "CLIENT_TRADE_ID_INVALID"),
            Self::ClientTradeIdAlreadyExists => write!(f, "CLIENT_TRADE_ID_ALREADY_EXISTS"),
            Self::ClientTradeTagInvalid => write!(f, "CLIENT_TRADE_TAG_INVALID"),
            Self::ClientTradeCommentInvalid => write!(f, "CLIENT_TRADE_COMMENT_INVALID"),
            Self::OrderFillPositionActionMissing => write!(f, "ORDER_FILL_POSITION_ACTION_MISSING"),
            Self::OrderFillPositionActionInvalid => write!(f, "ORDER_FILL_POSITION_ACTION_INVALID"),
            Self::TriggerConditionMissing => write!(f, "TRIGGER_CONDITION_MISSING"),
            Self::TriggerConditionInvalid => write!(f, "TRIGGER_CONDITION_INVALID"),
            Self::OrderPartialFillOptionMissing => write!(f, "ORDER_PARTIAL_FILL_OPTION_MISSING"),
            Self::OrderPartialFillOptionInvalid => write!(f, "ORDER_PARTIAL_FILL_OPTION_INVALID"),
            Self::InvalidReissueImmediatePartialFill => write!(f, "INVALID_REISSUE_IMMEDIATE_PARTIAL_FILL"),
            Self::TakeProfitOrderAlreadyExists => write!(f, "TAKE_PROFIT_ORDER_ALREADY_EXISTS"),
            Self::TakeProfitOnFillPriceMissing => write!(f, "TAKE_PROFIT_ON_FILL_PRICE_MISSING"),
            Self::TakeProfitOnFillPriceInvalid => write!(f, "TAKE_PROFIT_ON_FILL_PRICE_INVALID"),
            Self::TakeProfitOnFillPricePrecisionExceeded => write!(f, "TAKE_PROFIT_ON_FILL_PRICE_PRECISION_EXCEEDED"),
            Self::TakeProfitOnFillTimeInForceMissing => write!(f, "TAKE_PROFIT_ON_FILL_TIME_IN_FORCE_MISSING"),
            Self::TakeProfitOnFillTimeInForceInvalid => write!(f, "TAKE_PROFIT_ON_FILL_TIME_IN_FORCE_INVALID"),
            Self::TakeProfitOnFillGtdTimestampMissing => write!(f, "TAKE_PROFIT_ON_FILL_GTD_TIMESTAMP_MISSING"),
            Self::TakeProfitOnFillGtdTimestampInPast => write!(f, "TAKE_PROFIT_ON_FILL_GTD_TIMESTAMP_IN_PAST"),
            Self::TakeProfitOnFillClientOrderIdInvalid => write!(f, "TAKE_PROFIT_ON_FILL_CLIENT_ORDER_ID_INVALID"),
            Self::TakeProfitOnFillClientOrderTagInvalid => write!(f, "TAKE_PROFIT_ON_FILL_CLIENT_ORDER_TAG_INVALID"),
            Self::TakeProfitOnFillClientOrderCommentInvalid => write!(f, "TAKE_PROFIT_ON_FILL_CLIENT_ORDER_COMMENT_INVALID"),
            Self::TakeProfitOnFillTriggerConditionMissing => write!(f, "TAKE_PROFIT_ON_FILL_TRIGGER_CONDITION_MISSING"),
            Self::TakeProfitOnFillTriggerConditionInvalid => write!(f, "TAKE_PROFIT_ON_FILL_TRIGGER_CONDITION_INVALID"),
            Self::StopLossOrderAlreadyExists => write!(f, "STOP_LOSS_ORDER_ALREADY_EXISTS"),
            Self::StopLossOrderGuaranteedRequired => write!(f, "STOP_LOSS_ORDER_GUARANTEED_REQUIRED"),
            Self::StopLossOrderGuaranteedPriceWithinSpread => write!(f, "STOP_LOSS_ORDER_GUARANTEED_PRICE_WITHIN_SPREAD"),
            Self::StopLossOrderGuaranteedNotAllowed => write!(f, "STOP_LOSS_ORDER_GUARANTEED_NOT_ALLOWED"),
            Self::StopLossOrderGuaranteedHaltedCreateViolation => write!(f, "STOP_LOSS_ORDER_GUARANTEED_HALTED_CREATE_VIOLATION"),
            Self::StopLossOrderGuaranteedHaltedTightenViolation => write!(f, "STOP_LOSS_ORDER_GUARANTEED_HALTED_TIGHTEN_VIOLATION"),
            Self::StopLossOrderGuaranteedHedgingNotAllowed => write!(f, "STOP_LOSS_ORDER_GUARANTEED_HEDGING_NOT_ALLOWED"),
            Self::StopLossOrderGuaranteedMinimumDistanceNotMet => write!(f, "STOP_LOSS_ORDER_GUARANTEED_MINIMUM_DISTANCE_NOT_MET"),
            Self::StopLossOrderNotCancelable => write!(f, "STOP_LOSS_ORDER_NOT_CANCELABLE"),
            Self::StopLossOrderNotReplaceable => write!(f, "STOP_LOSS_ORDER_NOT_REPLACEABLE"),
            Self::StopLossOrderGuaranteedLevelRestrictionExceeded => write!(f, "STOP_LOSS_ORDER_GUARANTEED_LEVEL_RESTRICTION_EXCEEDED"),
            Self::StopLossOrderPriceAndDistanceBothSpecified => write!(f, "STOP_LOSS_ORDER_PRICE_AND_DISTANCE_BOTH_SPECIFIED"),
            Self::StopLossOrderPriceAndDistanceBothMissing => write!(f, "STOP_LOSS_ORDER_PRICE_AND_DISTANCE_BOTH_MISSING"),
            Self::StopLossOnFillRequiredForPendingOrder => write!(f, "STOP_LOSS_ON_FILL_REQUIRED_FOR_PENDING_ORDER"),
            Self::StopLossOnFillGuaranteedNotAllowed => write!(f, "STOP_LOSS_ON_FILL_GUARANTEED_NOT_ALLOWED"),
            Self::StopLossOnFillGuaranteedRequired => write!(f, "STOP_LOSS_ON_FILL_GUARANTEED_REQUIRED"),
            Self::StopLossOnFillPriceMissing => write!(f, "STOP_LOSS_ON_FILL_PRICE_MISSING"),
            Self::StopLossOnFillPriceInvalid => write!(f, "STOP_LOSS_ON_FILL_PRICE_INVALID"),
            Self::StopLossOnFillPricePrecisionExceeded => write!(f, "STOP_LOSS_ON_FILL_PRICE_PRECISION_EXCEEDED"),
            Self::StopLossOnFillGuaranteedMinimumDistanceNotMet => write!(f, "STOP_LOSS_ON_FILL_GUARANTEED_MINIMUM_DISTANCE_NOT_MET"),
            Self::StopLossOnFillGuaranteedLevelRestrictionExceeded => write!(f, "STOP_LOSS_ON_FILL_GUARANTEED_LEVEL_RESTRICTION_EXCEEDED"),
            Self::StopLossOnFillDistanceInvalid => write!(f, "STOP_LOSS_ON_FILL_DISTANCE_INVALID"),
            Self::StopLossOnFillPriceDistanceMaximumExceeded => write!(f, "STOP_LOSS_ON_FILL_PRICE_DISTANCE_MAXIMUM_EXCEEDED"),
            Self::StopLossOnFillDistancePrecisionExceeded => write!(f, "STOP_LOSS_ON_FILL_DISTANCE_PRECISION_EXCEEDED"),
            Self::StopLossOnFillPriceAndDistanceBothSpecified => write!(f, "STOP_LOSS_ON_FILL_PRICE_AND_DISTANCE_BOTH_SPECIFIED"),
            Self::StopLossOnFillPriceAndDistanceBothMissing => write!(f, "STOP_LOSS_ON_FILL_PRICE_AND_DISTANCE_BOTH_MISSING"),
            Self::StopLossOnFillTimeInForceMissing => write!(f, "STOP_LOSS_ON_FILL_TIME_IN_FORCE_MISSING"),
            Self::StopLossOnFillTimeInForceInvalid => write!(f, "STOP_LOSS_ON_FILL_TIME_IN_FORCE_INVALID"),
            Self::StopLossOnFillGtdTimestampMissing => write!(f, "STOP_LOSS_ON_FILL_GTD_TIMESTAMP_MISSING"),
            Self::StopLossOnFillGtdTimestampInPast => write!(f, "STOP_LOSS_ON_FILL_GTD_TIMESTAMP_IN_PAST"),
            Self::StopLossOnFillClientOrderIdInvalid => write!(f, "STOP_LOSS_ON_FILL_CLIENT_ORDER_ID_INVALID"),
            Self::StopLossOnFillClientOrderTagInvalid => write!(f, "STOP_LOSS_ON_FILL_CLIENT_ORDER_TAG_INVALID"),
            Self::StopLossOnFillClientOrderCommentInvalid => write!(f, "STOP_LOSS_ON_FILL_CLIENT_ORDER_COMMENT_INVALID"),
            Self::StopLossOnFillTriggerConditionMissing => write!(f, "STOP_LOSS_ON_FILL_TRIGGER_CONDITION_MISSING"),
            Self::StopLossOnFillTriggerConditionInvalid => write!(f, "STOP_LOSS_ON_FILL_TRIGGER_CONDITION_INVALID"),
            Self::TrailingStopLossOrderAlreadyExists => write!(f, "TRAILING_STOP_LOSS_ORDER_ALREADY_EXISTS"),
            Self::TrailingStopLossOnFillPriceDistanceMissing => write!(f, "TRAILING_STOP_LOSS_ON_FILL_PRICE_DISTANCE_MISSING"),
            Self::TrailingStopLossOnFillPriceDistanceInvalid => write!(f, "TRAILING_STOP_LOSS_ON_FILL_PRICE_DISTANCE_INVALID"),
            Self::TrailingStopLossOnFillPriceDistancePrecisionExceeded => write!(f, "TRAILING_STOP_LOSS_ON_FILL_PRICE_DISTANCE_PRECISION_EXCEEDED"),
            Self::TrailingStopLossOnFillPriceDistanceMaximumExceeded => write!(f, "TRAILING_STOP_LOSS_ON_FILL_PRICE_DISTANCE_MAXIMUM_EXCEEDED"),
            Self::TrailingStopLossOnFillPriceDistanceMinimumNotMet => write!(f, "TRAILING_STOP_LOSS_ON_FILL_PRICE_DISTANCE_MINIMUM_NOT_MET"),
            Self::TrailingStopLossOnFillTimeInForceMissing => write!(f, "TRAILING_STOP_LOSS_ON_FILL_TIME_IN_FORCE_MISSING"),
            Self::TrailingStopLossOnFillTimeInForceInvalid => write!(f, "TRAILING_STOP_LOSS_ON_FILL_TIME_IN_FORCE_INVALID"),
            Self::TrailingStopLossOnFillGtdTimestampMissing => write!(f, "TRAILING_STOP_LOSS_ON_FILL_GTD_TIMESTAMP_MISSING"),
            Self::TrailingStopLossOnFillGtdTimestampInPast => write!(f, "TRAILING_STOP_LOSS_ON_FILL_GTD_TIMESTAMP_IN_PAST"),
            Self::TrailingStopLossOnFillClientOrderIdInvalid => write!(f, "TRAILING_STOP_LOSS_ON_FILL_CLIENT_ORDER_ID_INVALID"),
            Self::TrailingStopLossOnFillClientOrderTagInvalid => write!(f, "TRAILING_STOP_LOSS_ON_FILL_CLIENT_ORDER_TAG_INVALID"),
            Self::TrailingStopLossOnFillClientOrderCommentInvalid => write!(f, "TRAILING_STOP_LOSS_ON_FILL_CLIENT_ORDER_COMMENT_INVALID"),
            Self::TrailingStopLossOrdersNotSupported => write!(f, "TRAILING_STOP_LOSS_ORDERS_NOT_SUPPORTED"),
            Self::TrailingStopLossOnFillTriggerConditionMissing => write!(f, "TRAILING_STOP_LOSS_ON_FILL_TRIGGER_CONDITION_MISSING"),
            Self::TrailingStopLossOnFillTriggerConditionInvalid => write!(f, "TRAILING_STOP_LOSS_ON_FILL_TRIGGER_CONDITION_INVALID"),
            Self::CloseTradeTypeMissing => write!(f, "CLOSE_TRADE_TYPE_MISSING"),
            Self::CloseTradePartialUnitsMissing => write!(f, "CLOSE_TRADE_PARTIAL_UNITS_MISSING"),
            Self::CloseTradeUnitsExceedTradeSize => write!(f, "CLOSE_TRADE_UNITS_EXCEED_TRADE_SIZE"),
            Self::CloseoutPositionDoesntExist => write!(f, "CLOSEOUT_POSITION_DOESNT_EXIST"),
            Self::CloseoutPositionIncompleteSpecification => write!(f, "CLOSEOUT_POSITION_INCOMPLETE_SPECIFICATION"),
            Self::CloseoutPositionUnitsExceedPositionSize => write!(f, "CLOSEOUT_POSITION_UNITS_EXCEED_POSITION_SIZE"),
            Self::CloseoutPositionReject => write!(f, "CLOSEOUT_POSITION_REJECT"),
            Self::CloseoutPositionPartialUnitsMissing => write!(f, "CLOSEOUT_POSITION_PARTIAL_UNITS_MISSING"),
            Self::MarkupGroupIdInvalid => write!(f, "MARKUP_GROUP_ID_INVALID"),
            Self::PositionAggregationModeInvalid => write!(f, "POSITION_AGGREGATION_MODE_INVALID"),
            Self::AdminConfigureDataMissing => write!(f, "ADMIN_CONFIGURE_DATA_MISSING"),
            Self::MarginRateInvalid => write!(f, "MARGIN_RATE_INVALID"),
            Self::MarginRateWouldTriggerCloseout => write!(f, "MARGIN_RATE_WOULD_TRIGGER_CLOSEOUT"),
            Self::AliasInvalid => write!(f, "ALIAS_INVALID"),
            Self::ClientConfigureDataMissing => write!(f, "CLIENT_CONFIGURE_DATA_MISSING"),
            Self::MarginRateWouldTriggerMarginCall => write!(f, "MARGIN_RATE_WOULD_TRIGGER_MARGIN_CALL"),
            Self::AmountInvalid => write!(f, "AMOUNT_INVALID"),
            Self::InsufficientFunds => write!(f, "INSUFFICIENT_FUNDS"),
            Self::AmountMissing => write!(f, "AMOUNT_MISSING"),
            Self::FundingReasonMissing => write!(f, "FUNDING_REASON_MISSING"),
            Self::ClientExtensionsDataMissing => write!(f, "CLIENT_EXTENSIONS_DATA_MISSING"),
            Self::ReplacingOrderInvalid => write!(f, "REPLACING_ORDER_INVALID"),
            Self::ReplacingTradeIdInvalid => write!(f, "REPLACING_TRADE_ID_INVALID"),
        }
    }
}

impl Default for TransactionRejectReason {
    fn default() -> TransactionRejectReason {
        Self::InternalServerError
    }
}

