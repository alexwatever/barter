/*
 * OANDA v20 REST API
 *
 * The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PositionAggregationMode : The way that position values for an Account are calculated and aggregated.
/// The way that position values for an Account are calculated and aggregated.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PositionAggregationMode {
    #[serde(rename = "ABSOLUTE_SUM")]
    AbsoluteSum,
    #[serde(rename = "MAXIMAL_SIDE")]
    MaximalSide,
    #[serde(rename = "NET_SUM")]
    NetSum,

}

impl std::fmt::Display for PositionAggregationMode {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::AbsoluteSum => write!(f, "ABSOLUTE_SUM"),
            Self::MaximalSide => write!(f, "MAXIMAL_SIDE"),
            Self::NetSum => write!(f, "NET_SUM"),
        }
    }
}

impl Default for PositionAggregationMode {
    fn default() -> PositionAggregationMode {
        Self::AbsoluteSum
    }
}

