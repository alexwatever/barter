/*
 * OANDA v20 REST API
 *
 * The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrderFillTransaction : An OrderFillTransaction represents the filling of an Order in the client's Account.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderFillTransaction {
    /// The Transaction's Identifier.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The date/time when the Transaction was created.
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
    /// The ID of the user that initiated the creation of the Transaction.
    #[serde(rename = "userID", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i32>,
    /// The ID of the Account the Transaction was created for.
    #[serde(rename = "accountID", skip_serializing_if = "Option::is_none")]
    pub account_id: Option<String>,
    /// The ID of the \"batch\" that the Transaction belongs to. Transactions in the same batch are applied to the Account simultaneously.
    #[serde(rename = "batchID", skip_serializing_if = "Option::is_none")]
    pub batch_id: Option<String>,
    /// The Request ID of the request which generated the transaction.
    #[serde(rename = "requestID", skip_serializing_if = "Option::is_none")]
    pub request_id: Option<String>,
    /// The Type of the Transaction. Always set to \"ORDER_FILL\" for an OrderFillTransaction.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// The ID of the Order filled.
    #[serde(rename = "orderID", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<String>,
    /// The client Order ID of the Order filled (only provided if the client has assigned one).
    #[serde(rename = "clientOrderID", skip_serializing_if = "Option::is_none")]
    pub client_order_id: Option<String>,
    /// The name of the filled Order's instrument.
    #[serde(rename = "instrument", skip_serializing_if = "Option::is_none")]
    pub instrument: Option<String>,
    /// The number of units filled by the OrderFill.
    #[serde(rename = "units", skip_serializing_if = "Option::is_none")]
    pub units: Option<String>,
    /// This is the conversion factor in effect for the Account at the time of the OrderFill for converting any gains realized in Instrument quote units into units of the Account's home currency.
    #[serde(rename = "gainQuoteHomeConversionFactor", skip_serializing_if = "Option::is_none")]
    pub gain_quote_home_conversion_factor: Option<String>,
    /// This is the conversion factor in effect for the Account at the time of the OrderFill for converting any losses realized in Instrument quote units into units of the Account's home currency.
    #[serde(rename = "lossQuoteHomeConversionFactor", skip_serializing_if = "Option::is_none")]
    pub loss_quote_home_conversion_factor: Option<String>,
    /// This field is now deprecated and should no longer be used. The individual tradesClosed, tradeReduced and tradeOpened fields contain the exact/official price each unit was filled at.
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<String>,
    /// The price that all of the units of the OrderFill should have been filled at, in the absence of guaranteed price execution. This factors in the Account's current ClientPrice, used liquidity and the units of the OrderFill only. If no Trades were closed with their price clamped for guaranteed stop loss enforcement, then this value will match the price fields of each Trade opened, closed, and reduced, and they will all be the exact same.
    #[serde(rename = "fullVWAP", skip_serializing_if = "Option::is_none")]
    pub full_vwap: Option<String>,
    #[serde(rename = "fullPrice", skip_serializing_if = "Option::is_none")]
    pub full_price: Option<Box<models::ClientPrice>>,
    /// The reason that an Order was filled
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<Reason>,
    /// The profit or loss incurred when the Order was filled.
    #[serde(rename = "pl", skip_serializing_if = "Option::is_none")]
    pub pl: Option<String>,
    /// The financing paid or collected when the Order was filled.
    #[serde(rename = "financing", skip_serializing_if = "Option::is_none")]
    pub financing: Option<String>,
    /// The commission charged in the Account's home currency as a result of filling the Order. The commission is always represented as a positive quantity of the Account's home currency, however it reduces the balance in the Account.
    #[serde(rename = "commission", skip_serializing_if = "Option::is_none")]
    pub commission: Option<String>,
    /// The total guaranteed execution fees charged for all Trades opened, closed or reduced with guaranteed Stop Loss Orders.
    #[serde(rename = "guaranteedExecutionFee", skip_serializing_if = "Option::is_none")]
    pub guaranteed_execution_fee: Option<String>,
    /// The Account's balance after the Order was filled.
    #[serde(rename = "accountBalance", skip_serializing_if = "Option::is_none")]
    pub account_balance: Option<String>,
    #[serde(rename = "tradeOpened", skip_serializing_if = "Option::is_none")]
    pub trade_opened: Option<Box<models::TradeOpen>>,
    /// The Trades that were closed when the Order was filled (only provided if filling the Order resulted in a closing open Trades).
    #[serde(rename = "tradesClosed", skip_serializing_if = "Option::is_none")]
    pub trades_closed: Option<Vec<models::TradeReduce>>,
    #[serde(rename = "tradeReduced", skip_serializing_if = "Option::is_none")]
    pub trade_reduced: Option<Box<models::TradeReduce>>,
    /// The half spread cost for the OrderFill, which is the sum of the halfSpreadCost values in the tradeOpened, tradesClosed and tradeReduced fields. This can be a positive or negative value and is represented in the home currency of the Account.
    #[serde(rename = "halfSpreadCost", skip_serializing_if = "Option::is_none")]
    pub half_spread_cost: Option<String>,
}

impl OrderFillTransaction {
    /// An OrderFillTransaction represents the filling of an Order in the client's Account.
    pub fn new() -> OrderFillTransaction {
        OrderFillTransaction {
            id: None,
            time: None,
            user_id: None,
            account_id: None,
            batch_id: None,
            request_id: None,
            r#type: None,
            order_id: None,
            client_order_id: None,
            instrument: None,
            units: None,
            gain_quote_home_conversion_factor: None,
            loss_quote_home_conversion_factor: None,
            price: None,
            full_vwap: None,
            full_price: None,
            reason: None,
            pl: None,
            financing: None,
            commission: None,
            guaranteed_execution_fee: None,
            account_balance: None,
            trade_opened: None,
            trades_closed: None,
            trade_reduced: None,
            half_spread_cost: None,
        }
    }
}
/// The Type of the Transaction. Always set to \"ORDER_FILL\" for an OrderFillTransaction.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "CREATE")]
    Create,
    #[serde(rename = "CLOSE")]
    Close,
    #[serde(rename = "REOPEN")]
    Reopen,
    #[serde(rename = "CLIENT_CONFIGURE")]
    ClientConfigure,
    #[serde(rename = "CLIENT_CONFIGURE_REJECT")]
    ClientConfigureReject,
    #[serde(rename = "TRANSFER_FUNDS")]
    TransferFunds,
    #[serde(rename = "TRANSFER_FUNDS_REJECT")]
    TransferFundsReject,
    #[serde(rename = "MARKET_ORDER")]
    MarketOrder,
    #[serde(rename = "MARKET_ORDER_REJECT")]
    MarketOrderReject,
    #[serde(rename = "FIXED_PRICE_ORDER")]
    FixedPriceOrder,
    #[serde(rename = "LIMIT_ORDER")]
    LimitOrder,
    #[serde(rename = "LIMIT_ORDER_REJECT")]
    LimitOrderReject,
    #[serde(rename = "STOP_ORDER")]
    StopOrder,
    #[serde(rename = "STOP_ORDER_REJECT")]
    StopOrderReject,
    #[serde(rename = "MARKET_IF_TOUCHED_ORDER")]
    MarketIfTouchedOrder,
    #[serde(rename = "MARKET_IF_TOUCHED_ORDER_REJECT")]
    MarketIfTouchedOrderReject,
    #[serde(rename = "TAKE_PROFIT_ORDER")]
    TakeProfitOrder,
    #[serde(rename = "TAKE_PROFIT_ORDER_REJECT")]
    TakeProfitOrderReject,
    #[serde(rename = "STOP_LOSS_ORDER")]
    StopLossOrder,
    #[serde(rename = "STOP_LOSS_ORDER_REJECT")]
    StopLossOrderReject,
    #[serde(rename = "TRAILING_STOP_LOSS_ORDER")]
    TrailingStopLossOrder,
    #[serde(rename = "TRAILING_STOP_LOSS_ORDER_REJECT")]
    TrailingStopLossOrderReject,
    #[serde(rename = "ORDER_FILL")]
    OrderFill,
    #[serde(rename = "ORDER_CANCEL")]
    OrderCancel,
    #[serde(rename = "ORDER_CANCEL_REJECT")]
    OrderCancelReject,
    #[serde(rename = "ORDER_CLIENT_EXTENSIONS_MODIFY")]
    OrderClientExtensionsModify,
    #[serde(rename = "ORDER_CLIENT_EXTENSIONS_MODIFY_REJECT")]
    OrderClientExtensionsModifyReject,
    #[serde(rename = "TRADE_CLIENT_EXTENSIONS_MODIFY")]
    TradeClientExtensionsModify,
    #[serde(rename = "TRADE_CLIENT_EXTENSIONS_MODIFY_REJECT")]
    TradeClientExtensionsModifyReject,
    #[serde(rename = "MARGIN_CALL_ENTER")]
    MarginCallEnter,
    #[serde(rename = "MARGIN_CALL_EXTEND")]
    MarginCallExtend,
    #[serde(rename = "MARGIN_CALL_EXIT")]
    MarginCallExit,
    #[serde(rename = "DELAYED_TRADE_CLOSURE")]
    DelayedTradeClosure,
    #[serde(rename = "DAILY_FINANCING")]
    DailyFinancing,
    #[serde(rename = "RESET_RESETTABLE_PL")]
    ResetResettablePl,
}

impl Default for Type {
    fn default() -> Type {
        Self::Create
    }
}
/// The reason that an Order was filled
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Reason {
    #[serde(rename = "LIMIT_ORDER")]
    LimitOrder,
    #[serde(rename = "STOP_ORDER")]
    StopOrder,
    #[serde(rename = "MARKET_IF_TOUCHED_ORDER")]
    MarketIfTouchedOrder,
    #[serde(rename = "TAKE_PROFIT_ORDER")]
    TakeProfitOrder,
    #[serde(rename = "STOP_LOSS_ORDER")]
    StopLossOrder,
    #[serde(rename = "TRAILING_STOP_LOSS_ORDER")]
    TrailingStopLossOrder,
    #[serde(rename = "MARKET_ORDER")]
    MarketOrder,
    #[serde(rename = "MARKET_ORDER_TRADE_CLOSE")]
    MarketOrderTradeClose,
    #[serde(rename = "MARKET_ORDER_POSITION_CLOSEOUT")]
    MarketOrderPositionCloseout,
    #[serde(rename = "MARKET_ORDER_MARGIN_CLOSEOUT")]
    MarketOrderMarginCloseout,
    #[serde(rename = "MARKET_ORDER_DELAYED_TRADE_CLOSE")]
    MarketOrderDelayedTradeClose,
}

impl Default for Reason {
    fn default() -> Reason {
        Self::LimitOrder
    }
}

