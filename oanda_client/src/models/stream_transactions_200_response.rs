/*
 * OANDA v20 REST API
 *
 * The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// StreamTransactions200Response : The response body for the Transaction Stream uses chunked transfer encoding.  Each chunk contains Transaction and/or TransactionHeartbeat objects encoded as JSON.  Each JSON object is serialized into a single line of text, and multiple objects found in the same chunk are separated by newlines. TransactionHeartbeats are sent every 5 seconds.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StreamTransactions200Response {
    #[serde(rename = "transaction", skip_serializing_if = "Option::is_none")]
    pub transaction: Option<Box<models::Transaction>>,
    #[serde(rename = "heartbeat", skip_serializing_if = "Option::is_none")]
    pub heartbeat: Option<Box<models::TransactionHeartbeat>>,
}

impl StreamTransactions200Response {
    /// The response body for the Transaction Stream uses chunked transfer encoding.  Each chunk contains Transaction and/or TransactionHeartbeat objects encoded as JSON.  Each JSON object is serialized into a single line of text, and multiple objects found in the same chunk are separated by newlines. TransactionHeartbeats are sent every 5 seconds.
    pub fn new() -> StreamTransactions200Response {
        StreamTransactions200Response {
            transaction: None,
            heartbeat: None,
        }
    }
}

