/*
 * OANDA v20 REST API
 *
 * The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more.
 *
 * The version of the OpenAPI document: 3.0.25
 * Contact: api@oanda.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PositionFinancing : OpenTradeFinancing is used to pay/collect daily financing charge for a Position within an Account
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PositionFinancing {
    /// The instrument of the Position that financing is being paid/collected for.
    #[serde(rename = "instrument", skip_serializing_if = "Option::is_none")]
    pub instrument: Option<String>,
    /// The amount of financing paid/collected for the Position.
    #[serde(rename = "financing", skip_serializing_if = "Option::is_none")]
    pub financing: Option<String>,
    /// The financing paid/collecte for each open Trade within the Position.
    #[serde(rename = "openTradeFinancings", skip_serializing_if = "Option::is_none")]
    pub open_trade_financings: Option<Vec<models::OpenTradeFinancing>>,
}

impl PositionFinancing {
    /// OpenTradeFinancing is used to pay/collect daily financing charge for a Position within an Account
    pub fn new() -> PositionFinancing {
        PositionFinancing {
            instrument: None,
            financing: None,
            open_trade_financings: None,
        }
    }
}

